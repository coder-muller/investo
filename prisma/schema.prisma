generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  plan      Plan      @default(FREE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Product {
  id           String      @id @default(uuid())
  ticker       String
  name         String
  type         ProductType
  quantity     Int
  averagePrice Float
  price        Float
  dividend     Float
  expenses     Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  userId             String
  user               User                 @relation(fields: [userId], references: [id])
  Transaction        Transaction[]
  Dividend           Dividend[]
  Expense            Expense[]
  RealizedProfitLoss RealizedProfitLoss[]
}

enum ProductType {
  STOCK
  ETF
  FII
  CRYPTO
}

model Transaction {
  id        String          @id @default(uuid())
  type      TransactionType
  date      DateTime
  price     Float
  quantity  Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

enum TransactionType {
  BUY
  SELL
}

model Dividend {
  id          String   @id @default(uuid())
  date        DateTime
  amount      Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Expense {
  id          String   @id @default(uuid())
  date        DateTime
  amount      Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model RealizedProfitLoss {
  id          String   @id @default(uuid())
  date        DateTime
  quantity    Int
  buyPrice    Float
  sellPrice   Float
  totalProfit Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])
}
